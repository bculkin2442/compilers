/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    static AbstractSymbol objectID = AbstractTable.idtable.addString("Object");
    static AbstractSymbol dispID   = AbstractTable.idtable.addString("self");

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;

terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean        BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc    program;
nonterminal Classes     class_list;
nonterminal class_c     class;
nonterminal Features    feature_list;
nonterminal Feature     feature;
nonterminal Formal      formal;
nonterminal Formals     formal_list;
nonterminal Expression  expression;
nonterminal Expressions expression_list;
nonterminal Case        case;
nonterminal Cases       case_list;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LT, EQ, LE;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl {:
		RESULT = new programc(curr_lineno(), cl);
	:}
	| error {:
		parser.syntax_error((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek());

		RESULT = new programc(curr_lineno(), new Classes(curr_lineno()));
	:}
        ;

class_list
	/* single class */
	::= class:c {:
		RESULT = (new Classes(curr_lineno())).appendElement(c);
	:}
	/* several classes */
	| class_list:cl class:c {:
		RESULT = cl.appendElement(c);
	:}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI {: 
		RESULT = new class_c(curr_lineno(), n, 
				AbstractTable.idtable.addString("Object"), 
				f, curr_filename());
	    :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI {:
		RESULT = new class_c(curr_lineno(), n, p, f, curr_filename());
	  :}
	| error SEMI {:
		parser.syntax_error((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek());
		RESULT = new class_c(curr_lineno(), objectID, objectID, new Features(curr_lineno()), curr_filename());
	  :}

	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	::= /* empty */ {:
		RESULT = new Features(curr_lineno());
	    :}
	    /* Single feature. */
	|   feature:f {:
		RESULT = (new Features(curr_lineno())).appendElement(f);
	    :}
	    /* Multiple features. */
	|   feature_list:fl feature:f {:
		RESULT = fl.appendElement(f);
	    :}
	;

/* Either a method or an attribute. */
feature
	::= /* Method. */
	    OBJECTID:i LPAREN formal_list:fl RPAREN COLON OBJECTID:r LBRACE expression:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), i, fl, r, e); :}
	    /* Default attribute. */
	|   OBJECTID:i COLON OBJECTID:t SEMI
		{: RESULT = new attr(curr_lineno(), i, t, new no_expr(curr_lineno())); :}
	    /* Non-default attribute. */
	|   OBJECTID:i COLON OBJECTID:t ASSIGN expression:e SEMI
		{: RESULT = new attr(curr_lineno(), i, t, e); :}
	|   error SEMI {:
		parser.syntax_error((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek());
		RESULT = new attr(curr_lineno(), dispID, objectID, new no_expr(curr_lineno()));
	:}
	;

formal_list
	::= /* Single formal. */
	    formal:f
	    	{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
    	|
	    /* Multiple formals. */
	    formal_list:fl formal:f
	    	{: RESULT = fl.appendElement(f); :}
	|   error {:
		parser.syntax_error((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek());
		RESULT = new Formals(curr_lineno());
	:}
	;

case_list
	::= /* A single case. */
	    case:c
	    	{: RESULT = new Cases(curr_lineno()).appendElement(c); :}
	|   /* Multiple cases. */
	    case_list:cl case:c
	    	{: RESULT = cl.appendElement(c); :}
	;

expression
	::= /* Assignment. */
	    OBJECTID:i ASSIGN expression:e
	    	{: RESULT = new assign(curr_lineno(), i, e); :}
	|   /* Static dispatch. */
	    expression:e AT TYPEID:t DOT OBJECTID:m LPAREN expression_list:el RPAREN
	    	{: RESULT = new static_dispatch(curr_lineno(), e, t, m, el); :}
	|   /* Dispatch on object. */
	    expression:e DOT OBJECTID:m LPAREN expression_list:el RPAREN
	    	{: RESULT = new dispatch(curr_lineno(), e, m, el); :}
	|   /* Dispatch on self. */
	    OBJECTID:m LPAREN expression_list:el RPAREN {:
		    RESULT = new dispatch(curr_lineno(), new object(curr_lineno(),
					    dispID), m, el);
	    :}
	|   /* Conditional. */
	    IF expression:p THEN expression:t ELSE expression:f FI
	    	{: RESULT = new cond(curr_lineno(), p, t, f); :}
	|   /* Loop. */
	    WHILE expression:p LOOP expression:b POOL
	    	{: RESULT = new loop(curr_lineno(), p, b); :}
	|   /* Block. */
	    LBRACE expression_list:el RBRACE
	    	{: RESULT = new block(curr_lineno(), el); :}
	|   /* Let without default value. */
	    LET OBJECTID:n COLON TYPEID:t IN expression:e
	    	{: RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), e); :}
	|   /* Let with default value. */
	    LET OBJECTID:n COLON TYPEID:t ASSIGN expression:i IN expression:e
	    	{: RESULT = new let(curr_lineno(), n, t, i, e); :}
	|   /* Type-case. */
	    CASE expression:s OF case_list:cl ESAC
	    	{: RESULT = new typcase(curr_lineno(), s, cl); :}
	|   /* New. */
	    NEW TYPEID:t
	    	{: RESULT = new new_(curr_lineno(), t); :}
	|   /* Isvoid. */
	    ISVOID expression:e
	    	{: RESULT = new isvoid(curr_lineno(), e); :}
	|   /* +. */
	    expression:l PLUS expression:r
	    	{: RESULT = new plus(curr_lineno(), l, r); :}
	|   /* -. */
	    expression:l MINUS expression:r
	    	{: RESULT = new sub(curr_lineno(), l, r); :}
	|   /* *. */
	    expression:l MULT expression:r
	    	{: RESULT = new mul(curr_lineno(), l, r); :}
	|   /* /. */
	    expression:l DIV expression:r
	    	{: RESULT = new divide(curr_lineno(), l, r); :}
	|   /* ~. */
	    NEG expression:e
	    	{: RESULT = new neg(curr_lineno(), e); :}
	|   /* <. */
	    expression:l LT expression:r
	    	{: RESULT = new lt(curr_lineno(), l, r); :}
	|   /* =. */
	    expression:l EQ expression:r
	    	{: RESULT = new eq(curr_lineno(), l, r); :}
	|   /* <=. */
	    expression:l LE expression:r
	    	{: RESULT = new leq(curr_lineno(), l, r); :}
	|   /* NOT. */
	    NOT expression:e
	    	{: RESULT = new comp(curr_lineno(), e); :}
	|   /* parens. */
	    LPAREN expression:e RPAREN
	    	{: RESULT = e; :}
	|   /* ID. */
	    OBJECTID:i
	    	{: RESULT = new object(curr_lineno(), i); :}
	|   /* int. */
	    INT_CONST:i
	    	{: RESULT = new int_const(curr_lineno(), i); :}
	|  /* string. */
	   STR_CONST:s
	   	{: RESULT = new string_const(curr_lineno(), s); :}
	|  /* boolean const. */
	   BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	;

expression_list
	::= /* No expressions. */
		{: RESULT = new Expressions(curr_lineno()); :}
	    /* One expression. */
	|   expression:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	    /* Multiple expressions. */
	|   expression_list:el SEMI expression:e
		{: RESULT = el.appendElement(e); :}
	;
